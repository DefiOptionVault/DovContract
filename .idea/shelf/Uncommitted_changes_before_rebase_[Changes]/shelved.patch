Index: src/Dov.sol
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\ncontract Dov {\n    constructor(){\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Dov.sol b/src/Dov.sol
--- a/src/Dov.sol	(revision 11a488994005a02a53e6c4d3cbbafb016d7af0b0)
+++ b/src/Dov.sol	(date 1696429216573)
@@ -1,9 +1,61 @@
 // SPDX-License-Identifier: UNLICENSED
 pragma solidity ^0.8.0;
 
-import {ERC721} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
-contract Dov {
-    constructor(){
+import {ERC721} from "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";
+import {ERC20} from "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
+import {AccessControl} from "openzeppelin-contracts/contracts/access/AccessControl.sol";
+
+import {RoundData, RoundStrikeData, WritePosition} from "./DovStruct.sol";
+import {DovState} from "./DovState.sol";
+
+
+// 기본적으로 PUT 옵션
+contract Dov is
+    ERC721,
+    ERC20,
+    AccessControl,
+    DovState
+{
+    constructor(
+        string memory _name,
+        string memory _symbol
+    ) ERC721(_name, _symbol) {
+        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
+    }
+
 
+    function bootstrap(
+        uint256[] memory strikes,
+        uint256 expiry,
+        string memory expirySymbol
+    ) external nonReentrant onlyRole(DEFAULT_ADMIN_ROLE) {
+        uint nextRound = currentRound + 1;
+
+        // ADMIN이 실수로 expiry가 이미 끝난 상태로 만기설정을 하는것을 방지.
+        _validate(block.timestamp < expiry);
+        // 첫번째 라운드가 아닐경우 이전 라운드가 만기되었는지 확인
+        if(currentRound > 0) {
+            _validate(roundData[currentRound].expired);
+        }
+
+        // 다음 라운드 정보 설정
+        roundData[nextRound].strikes = strikes;
+        roundData[nextRound].startTime = block.timestamp;
+        roundData[nextRound].expiry = expiry;
+
+        // 다음 라운드로 진행
+        currentRound = nextRound;
+
+        // TODO: 다음 라운드의 행사가별로 매수 영수증용 컨트랙트 생성, 리서치
+        uint strike;
+        for (uint i = 0; i < strikes.length; i++) {
+            strike = strikes[i];
+
+        }
+    }
+
+
+    function _validate(bool _condition) private pure {
+        require(_condition, "condition doesn't match");
     }
 }
